paths:
  # Endpoint to get all employees and create a new employee
  /employees/:
    # GET operation
    get:
      tags:
      - employees

      summary: Gets all employees

      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/EmployeesResponse'
        '400':
          description: Invalid body supplied
          schema:
            $ref: '#/definitions/BadRequestResponse'

    # POST operation
    post:
      tags:
      - employees

      summary: Creates a new employee

      parameters:
      - in: body
        name: body
        description: A JSON object containing the employee information
        required: true
        schema:
          $ref: '#/definitions/Employee'

      responses:
        '201':
          description: Successful operation
          schema:
            $ref: '#/definitions/EmployeeIDResponse'
        '400':
          description: Invalid body supplied
          schema:
            $ref: '#/definitions/BadRequestResponse'
    
  # Endpoint to update and delete an employee
  /employees/{employeeId}:
    # GET Operation
    get:
      tags:
      - employees

      summary: Gets an employee
      
      parameters:
      - in: path
        name: employeeId
        description: String ID of the employee to update
        required: true
        schema:
          type: string

      responses:
        '204':
          description: Successful operation
          schema:
            $ref: '#/definitions/EmployeeResponse'
        '400':
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/BadRequestResponse'
    
    # PUT operation
    put:
      tags:
      - employees

      summary: Updates an employee
      
      parameters:
      - in: path
        name: employeeId
        description: String ID of the employee to update
        required: true
        schema:
          type: string

      - in: body
        name: body
        description: A JSON object containing the employee information to update
        required: true
        schema:
          $ref: '#/definitions/EmployeeUpdate'

      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/EmployeeResponse'
        '400':
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/BadRequestResponse'
    
    # DELETE operation
    delete:
      tags:
      - employees

      summary: Deletes an employee
      
      parameters:
      - in: path
        name: employeeId
        description: String ID of the employee to update
        required: true
        schema:
          type: string

      responses:
        '204':
          description: Successful operation
          schema:
            $ref: '#/definitions/OKResponse'
        '400':
          description: Invalid ID supplied
          schema:
            $ref: '#/definitions/BadRequestResponse'
    

definitions:
  # Employee schema
  Employee:
    type: object
    required:
    - userId
    - firstName
    - lastName
    - phoneNo
    - email
    - departmentId
    - hireDate
    - address
    properties:
      userId:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phoneNo:
        type: string
      email:
        type: string
      departmentId:
        type: string
      address:
        type: string
      hireDate:
        type: string
        format: date

  # EmployeeUpdate model
  EmployeeUpdate:
    type: object
    properties:
      firstName:
        type: string
      lastName:
        type: string
      phoneNo:
        type: string
      email:
        type: string
      departmentId:
        type: string
      address:
        type: string
      hireDate:
        type: string
        format: date

  # EmployeeIDResponse model
  EmployeeIDResponse:
    type: object
    required:
    - status
    - data
    properties:
      status:
        type: string
      data:
        type: string

  # EmployeeResponse model
  EmployeeResponse:
    type: object
    required:
    - status
    - data
    properties:
      status:
        type: string
      data:
        $ref: '#/definitions/Employee'

  # EmployeesResponse model
  EmployeesResponse:
    type: object
    required:
    - status
    - data
    properties:
      status:
        type: string
      data:
        type: array
        items:
          $ref: '#/definitions/Employee'

  # OKResponse model
  OKResponse:
    type: object
    required:
    - status
    - data
    properties:
      status:
        type: string
      data:
        type: string

  # BadRequestResponse model
  BadRequestResponse:
    type: object
    required:
    - status
    - data
    properties:
      status:
        type: string
      data:
        type: string